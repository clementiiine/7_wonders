        //Transfert de données internes
        for(Vector<Object> v : contextList){        //Accès aux données internes
            for(int i = 0; i<v.size();i++){
                allList.add((String) v.elementAt(i));   //Une liste de données pour une seule chaîne
            }
        } 
        //Créer le numéro du joueur, son nom, la liste des merveilles choisies par le joueur.
        List<String> numberList = new ArrayList<>();
        List<String> nameList = new ArrayList<>();
        List<String> wonderList = new ArrayList<>();
        //List<String> alltheList = new ArrayList<>();    //Créez une liste de toutes les merveilles choisies par les joueurs
        ainsi que les jeux de cartes placés ci-dessous.

        //Réglage du lecteur
        for(int i = 0;i<contextList.size();i++){
            //alltheList.add("Card"+i);
            for (int j = 0;j<allList.size();j++){
                if(j%3 == 0){
                    numberList.add(allList.get(j));
                }else if (j%3 == 1){
                    nameList.add(allList.get(j));
                }else if(j%3 == 2){
                    wonderList.add(allList.get(j));
                    //alltheList.add(allList.get(j));
                }                 
            }
            
            //Créer des données pour tous les joueurs
            if(i == 0){
                Players Player1 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if (i == 1){
                Players Player2 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if(i == 2){
                Players Player3 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if(i == 3){
                Players Player4 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if(i == 4){
                Players Player5 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if(i == 5){
                Players Player6 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }else if(i == 6){
                Players Player7 = new Players(numberList.get(i), nameList.get(i), wonderList.get(i));
            }            
        }

        //Création d’un groupe de cartes

        //resources
        Cards BRICK = new Cards("Brick", new Image("src/images/cards/resources/BRICK.png"));
        Cards GLASS = new Cards("Glass", new Image("src/images/cards/resources/GLASS.png"));
        Cards GOLD = new Cards("Gold", new Image("src/images/cards/resources/GOLD.png"));
        Cards PAPER = new Cards("Paper", new Image("src/images/cards/resources/PAPER.png"));
        Cards STONE = new Cards("Stone", new Image("src/images/cards/resources/STONE.png"));
        Cards WOOD = new Cards("Wood", new Image("src/images/cards/resources/WOOD.png"));

        //science
        Cards PLOT = new Cards("Plot", new Image("src/images/cards/science/PLOT.png"));
        Cards SLATE = new Cards("Slate", new Image("src/images/cards/science/SLATE.png"));
        Cards WHEEL = new Cards("Wheel", new Image("src/images/cards/science/WHEEL.png"));

        //score
        Cards TWOPOINTSANDCAT  = new Cards("TwoPointsAndCat", new Image("src/images/cards/score/2 points + pièces d'échecs du chat.png"));
        Cards THREEPOINTS = new Cards("ThreePoints", new Image("src/images/cards/score/3points.png"));

        //war
        Cards WAR = new Cards("War", new Image("src/images/cards/war/War score.png"));
        Cards WAR1 = new Cards("War1", new Image("src/images/cards/war/War score + 1 horn.png"));
        Cards WAR2 = new Cards("War2", new Image("src/images/cards/war/War score +2 horns.png"));


            //Établir le jugement de la carte
    public static String jugmentcard(String name){
        switch(name){
            case "Brick" :
                return "src/images/cards/resources/BRICK.png";
            case "Glass" :
                return "src/images/cards/resources/GLASS.png";
            case "Gold" :
                return "src/images/cards/resources/GOLD.png";
            case "Paper" :
                return "src/images/cards/resources/PAPER.png";
            case "Stone" :
                return "src/images/cards/resources/STONE.png";
            case "Wood" :
                return "src/images/cards/resources/WOOD.png";
            case "Plot" :
                return "src/images/cards/science/PLOT.png";
            case "Slate" :
                return "src/images/cards/science/SLATE.png";
            case "Wheel" :
                return "src/images/cards/science/WHEEL.png";
            case "TwoPointsAndCat" :
                return "src/images/cards/score/2 points + pièces d'échecs du chat.png";
            case "ThreePoints" :
                return "src/images/cards/score/3points.png";
            case "War" :
                return "src/images/cards/war/War score.png";
            case "War1" :
                return "src/images/cards/war/War score + 1 point.png";
            case "War2" :
                return "src/images/cards/war/War score + 2 points.png";
            default :
                return null;
        }
        
    }


            //Configurer le pool de cartes de gauche
            int i_left = 1;
            JPanel leftCardJPanel = new JPanel();
            CardLayout LeftCard = new CardLayout();
            leftCardJPanel.setLayout(LeftCard);
            Cards infoCards_left;
            JButton cardChangeButton_left;
    
            for (int j = 0; j<lists.get(i_left).size();j++){
                infoCards_left = lists.get(i_left).get(j);
                ImageIcon cardImageIcon = infoCards_left.getCardImage();
                cardChangeButton_left = new JButton(cardImageIcon);
                leftCardJPanel.add(cardChangeButton_left);
                LeftCard.show(leftCardJPanel, infoCards_left.getName());
                cardChangeButton_left.addActionListener(new ActionListener(){
    
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        LeftCard.next(leftCardJPanel);
                    }
                    
                });
                lists.get(i_left).remove(j);
            }
            container.add(leftCardJPanel);
            leftCardJPanel.setBounds(200,400,220,300);    
            
            //Définir le bon pool de cartes
            int i_right = 2;
            JPanel RightCardJPanel = new JPanel();
            CardLayout RightCard = new CardLayout();
            RightCardJPanel.setLayout(RightCard);
            Cards infoCards_right;
            JButton cardChangeButton_right;
    
            for (int j = 0; j<lists.get(i_right).size();j++){
                infoCards_right = lists.get(i_right).get(j);
                ImageIcon cardImageIcon_right = infoCards_right.getCardImage();
                cardChangeButton_right = new JButton(cardImageIcon_right);
                RightCardJPanel.add(cardChangeButton_right);
                RightCard.show(RightCardJPanel, infoCards_right.getName());
                cardChangeButton_right.addActionListener(new ActionListener(){
    
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        RightCard.next(RightCardJPanel);
                    }
                    
                });
                lists.get(i_right).remove(j);
            }
            container.add(RightCardJPanel);
            RightCardJPanel.setBounds(900,400,220,300);


                    //Placer la carte centrale (pas encore au dos de la carte)
        JPanel middleCardPanel = new JPanel();
        CardLayout MiddleCard = new CardLayout();   //Création d’une classe de cartes
        middleCardPanel.setLayout(MiddleCard);
        Cards InfoOfList;
        JButton cardListButton;
        
        //Cliquez pour changer de carte

        for (int i = 0; i<lists.get(0).size();i++){
            InfoOfList = lists.get(0).get(i);
            ImageIcon cardImageIcon = InfoOfList.getCardImage();
            cardListButton = new JButton(cardImageIcon);
            middleCardPanel.add(cardListButton);
            MiddleCard.show(middleCardPanel,InfoOfList.getName());
            cardListButton.addActionListener(new ActionListener(){

                public void actionPerformed(ActionEvent e){
                    MiddleCard.next(middleCardPanel);
                    
                }

            });
            lists.get(0).remove(i);
            
        }
        
        //Ajouter dans le conteneur
        container.add(middleCardPanel);
        middleCardPanel.setBounds(800, 10, 220, 300);



        //Configuration des données initiales
        int center = 0;
        int i_left = 1;
        int i_right = 2;

        //Placer la carte centrale (pas encore au dos de la carte)
        List<Cards> centerCards = lists.get(center);
        Iterator<Cards> centerIT = centerCards.iterator();
        JPanel middleCardPanel = new JPanel();
        CardLayout MiddleCard = new CardLayout();   //Création d’une classe de cartes
        middleCardPanel.setLayout(MiddleCard);
        Cards InfoOfList;
        JButton cardListButton;
        
        //Cliquez pour changer de carte
        while (centerIT.hasNext()){
            InfoOfList = centerIT.next();
            ImageIcon cardImageIcon = InfoOfList.getCardImage();
            cardListButton = new JButton(cardImageIcon);
            middleCardPanel.add(cardListButton);
            MiddleCard.show(middleCardPanel,InfoOfList.getName());
            cardListButton.addActionListener(new ActionListener(){

                public void actionPerformed(ActionEvent e){
                    MiddleCard.next(middleCardPanel);
                    centerIT.remove();
                }

            });
        }
        //Ajouter dans le conteneur
        container.add(middleCardPanel);
        middleCardPanel.setBounds(800, 10, 220, 300);

        //Définir le pool de cartes de gauche
        List<Cards> lefCards = lists.get(i_left);
        Iterator<Cards> leftIT = lefCards.iterator();       //Traitement des ponts avec les itérateurs
        JPanel leftCardJPanel = new JPanel();
        CardLayout LeftCard = new CardLayout();
        leftCardJPanel.setLayout(LeftCard);
        Cards infoCards_left;
        JButton cardChangeButton_left;

        while(leftIT.hasNext()){
            infoCards_left = leftIT.next();
            ImageIcon cardImageIcon = infoCards_left.getCardImage();
            cardChangeButton_left = new JButton(cardImageIcon);
            leftCardJPanel.add(cardChangeButton_left);
            LeftCard.show(leftCardJPanel, infoCards_left.getName());
            cardChangeButton_left.addActionListener(new ActionListener(){

                @Override
                public void actionPerformed(ActionEvent e) {
                    LeftCard.next(leftCardJPanel);
                    leftIT.remove();
                }
                
            });
        }
        container.add(leftCardJPanel);
        leftCardJPanel.setBounds(200,400,220,300);    
            
        //设置右边卡池
        List<Cards> righCards = lists.get(i_right);
        Iterator<Cards> rightIT = righCards.iterator();
        JPanel RightCardJPanel = new JPanel();
        CardLayout RightCard = new CardLayout();
        RightCardJPanel.setLayout(RightCard);
        Cards infoCards_right;
        JButton cardChangeButton_right;

        while (rightIT.hasNext()){
            infoCards_right = rightIT.next();
            ImageIcon cardImageIcon_right = infoCards_right.getCardImage();
            cardChangeButton_right = new JButton(cardImageIcon_right);
            RightCardJPanel.add(cardChangeButton_right);
            RightCard.show(RightCardJPanel, infoCards_right.getName());
            cardChangeButton_right.addActionListener(new ActionListener(){

                @Override
                public void actionPerformed(ActionEvent e) {
                    RightCard.next(RightCardJPanel);
                    rightIT.remove();
                }
                
            });
        }
        container.add(RightCardJPanel);
        RightCardJPanel.setBounds(1420,400,220,300);



        //Définir le bouton nextplayer
        JButton nextPlayerButton = new JButton("Next");
        container.add(nextPlayerButton);
        nextPlayerButton.setBounds(1700, 850, 120, 70);
        nextPlayerButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                i++;
                //System.out.println(i_left);
                //System.out.println(i_right);
                i_left ++;
                i_right ++;
                //System.out.println(i_left);
                //System.out.println(i_right);

                String wonderString = jugmentwonders(wonderList.get(i%wonderList.size()));
                ImageIcon wodnerIcon = new ImageIcon(wonderString);
                wodnerJLabel.setIcon(wodnerIcon);

                if(i_left >= wonderList.size()+1){
                    i_left = 1;
                }
                if(i_right >= wonderList.size()+1){
                    i_right = 1;
                }
                System.out.println(i_left);
                System.out.println(i_right);
                getCard(lists.get(i_left), container, 200, 400);
                getCard(lists.get(i_right), container, 200, 400);

                //System.out.println(i);
            }
            
        });


            //Définir pour obtenir des groupes de cartes individuelles
    public static void getCard(List<Cards> cardlist,Container co,int x,int y){
        Iterator<Cards> it = cardlist.iterator();
        JPanel jPanel = new JPanel();
        CardLayout CL = new CardLayout();
        jPanel.setLayout(CL);
        Cards infoCards;
        JButton button;

        while(it.hasNext()){
            infoCards = it.next();
            ImageIcon imageIcon = infoCards.getCardImage();
            button = new JButton(imageIcon);
            jPanel.add(button);
            CL.show(jPanel, infoCards.getName());
            button.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
                    CL.next(jPanel);
                } 
            });
        }

        co.add(jPanel);
        jPanel.setBounds(x, y, 220, 300);
    }



    playersview player1 = new playersview(1,wonderList.get(0),lists.get(1),lists.get(2));
    playersview player2 = new playersview(2,wonderList.get(1),lists.get(2),lists.get(3));
    playersview player3 = new playersview(3,wonderList.get(2),lists.get(3),lists.get(4));
    playersview player4 = new playersview(4,wonderList.get(3),lists.get(4),lists.get(5));
    playersview player5 = new playersview(5,wonderList.get(4),lists.get(5),lists.get(6));
    playersview player6 = new playersview(6,wonderList.get(5),lists.get(6),lists.get(7));
    playersview player7 = new playersview(7,wonderList.get(6),lists.get(7),lists.get(8));

    List<playersview> allPlayerView= new ArrayList<>();
    allPlayerView.add(player1);
    allPlayerView.add(player2);
    allPlayerView.add(player3);
    allPlayerView.add(player4);
    allPlayerView.add(player5);
    allPlayerView.add(player6);
    allPlayerView.add(player7);





        //Définir pour obtenir des groupes de cartes individuelles
        public static JPanel getCard(List<Cards> cardlist){
            Iterator<Cards> it = cardlist.iterator();
            JPanel jPanel = new JPanel();
            CardLayout CL = new CardLayout();
            jPanel.setLayout(CL);
            Cards infoCards;
            JButton button;
    
            while(it.hasNext()){
                infoCards = it.next();
                ImageIcon imageIcon = infoCards.getCardImage();
                button = new JButton(imageIcon);
                jPanel.add(button);
                CL.show(jPanel, infoCards.getName());
                button.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e) {
                        CL.next(jPanel);
                    } 
                });
                
            }
            jPanel.setSize( 220, 300);
            return jPanel;
        }




        List<JButton> CenterDeckList = GetDeck(Separatelist.get(0));
        List<Playersview> PlayersList = new ArrayList<>();
        for(int i = 0;i<nameList.size();i++){
            List<Card> cardchooselist = new ArrayList<>();
            Playersview playersview = new Playersview(i%nameList.size(), wonderList.get(i%nameList.size()), CenterDeckList, GetDeck(LeftAndRightCardList.get(i%nameList.size())), GetDeck(LeftAndRightCardList.get((i+1)%nameList.size())),cardchooselist);
            for(int a = 0;a<CenterDeckList.size();a++){
                CenterDeckList.get(a).addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        int a = 0;
                        cardchooselist.add(Separatelist.get(0).get(a));
                        Separatelist.get(0).remove(a);
                        a++;
                    }
                });
            }
            for(int b = 0;b<GetDeck(LeftAndRightCardList.get(i%nameList.size())).size();b++){
                CenterDeckList.get(b).addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        int i = 0;
                        int b = 0;
                        cardchooselist.add(LeftAndRightCardList.get(i%nameList.size()).get(b));
                        LeftAndRightCardList.get(i%nameList.size()).remove(b);
                        i++;
                        b++;
                    }
                });
            }
            for(int c = 0;c<GetDeck(LeftAndRightCardList.get((i+1)%nameList.size())).size();c++){
                CenterDeckList.get(c).addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        int i = 0;
                        int c = 0;
                        cardchooselist.add(LeftAndRightCardList.get(i%nameList.size()).get(c));
                        LeftAndRightCardList.get(i%nameList.size()).remove(c);
                        i++;
                        c++;
                    }
                });
            }
            PlayersList.add(playersview);
        }